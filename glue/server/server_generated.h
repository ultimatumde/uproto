// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVER_UPROTOS2C_H_
#define FLATBUFFERS_GENERATED_SERVER_UPROTOS2C_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "s2clayout_generated.h"
#include "wincontent_generated.h"

namespace UProtoS2C {

struct S2CWindowAssociateTitle;
struct S2CWindowAssociateTitleBuilder;

struct S2CWindowServerEvent;
struct S2CWindowServerEventBuilder;

struct S2CWindowRequestedEvent;
struct S2CWindowRequestedEventBuilder;

struct S2CWindowProps;

enum S2CWindowEventType : int16_t {
  S2CWindowEventType_Create = 0,
  S2CWindowEventType_Destroy = 1,
  S2CWindowEventType_MIN = S2CWindowEventType_Create,
  S2CWindowEventType_MAX = S2CWindowEventType_Destroy
};

inline const S2CWindowEventType (&EnumValuesS2CWindowEventType())[2] {
  static const S2CWindowEventType values[] = {
    S2CWindowEventType_Create,
    S2CWindowEventType_Destroy
  };
  return values;
}

inline const char * const *EnumNamesS2CWindowEventType() {
  static const char * const names[3] = {
    "Create",
    "Destroy",
    nullptr
  };
  return names;
}

inline const char *EnumNameS2CWindowEventType(S2CWindowEventType e) {
  if (::flatbuffers::IsOutRange(e, S2CWindowEventType_Create, S2CWindowEventType_Destroy)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesS2CWindowEventType()[index];
}

enum S2CWindowRequestedEventType : int16_t {
  S2CWindowRequestedEventType_Minimize = 0,
  S2CWindowRequestedEventType_Maximize = 1,
  S2CWindowRequestedEventType_Restore = 2,
  S2CWindowRequestedEventType_Close = 3,
  S2CWindowRequestedEventType_Resize = 4,
  S2CWindowRequestedEventType_Move = 5,
  S2CWindowRequestedEventType_MIN = S2CWindowRequestedEventType_Minimize,
  S2CWindowRequestedEventType_MAX = S2CWindowRequestedEventType_Move
};

inline const S2CWindowRequestedEventType (&EnumValuesS2CWindowRequestedEventType())[6] {
  static const S2CWindowRequestedEventType values[] = {
    S2CWindowRequestedEventType_Minimize,
    S2CWindowRequestedEventType_Maximize,
    S2CWindowRequestedEventType_Restore,
    S2CWindowRequestedEventType_Close,
    S2CWindowRequestedEventType_Resize,
    S2CWindowRequestedEventType_Move
  };
  return values;
}

inline const char * const *EnumNamesS2CWindowRequestedEventType() {
  static const char * const names[7] = {
    "Minimize",
    "Maximize",
    "Restore",
    "Close",
    "Resize",
    "Move",
    nullptr
  };
  return names;
}

inline const char *EnumNameS2CWindowRequestedEventType(S2CWindowRequestedEventType e) {
  if (::flatbuffers::IsOutRange(e, S2CWindowRequestedEventType_Minimize, S2CWindowRequestedEventType_Move)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesS2CWindowRequestedEventType()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) S2CWindowProps FLATBUFFERS_FINAL_CLASS {
 private:
  Dim2D dim_;
  Pos2D pos_;
  int16_t monitor_;
  int16_t padding0__;

 public:
  S2CWindowProps()
      : dim_(),
        pos_(),
        monitor_(0),
        padding0__(0) {
    (void)padding0__;
  }
  S2CWindowProps(const Dim2D &_dim, const Pos2D &_pos, int16_t _monitor)
      : dim_(_dim),
        pos_(_pos),
        monitor_(::flatbuffers::EndianScalar(_monitor)),
        padding0__(0) {
    (void)padding0__;
  }
  const Dim2D &dim() const {
    return dim_;
  }
  const Pos2D &pos() const {
    return pos_;
  }
  int16_t monitor() const {
    return ::flatbuffers::EndianScalar(monitor_);
  }
};
FLATBUFFERS_STRUCT_END(S2CWindowProps, 16);

struct S2CWindowAssociateTitle FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2CWindowAssociateTitleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PID = 4,
    VT_TITLE = 6
  };
  const ::flatbuffers::String *pid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PID);
  }
  const ::flatbuffers::String *title() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TITLE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PID) &&
           verifier.VerifyString(pid()) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           verifier.EndTable();
  }
};

struct S2CWindowAssociateTitleBuilder {
  typedef S2CWindowAssociateTitle Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pid(::flatbuffers::Offset<::flatbuffers::String> pid) {
    fbb_.AddOffset(S2CWindowAssociateTitle::VT_PID, pid);
  }
  void add_title(::flatbuffers::Offset<::flatbuffers::String> title) {
    fbb_.AddOffset(S2CWindowAssociateTitle::VT_TITLE, title);
  }
  explicit S2CWindowAssociateTitleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2CWindowAssociateTitle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2CWindowAssociateTitle>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2CWindowAssociateTitle> CreateS2CWindowAssociateTitle(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> pid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> title = 0) {
  S2CWindowAssociateTitleBuilder builder_(_fbb);
  builder_.add_title(title);
  builder_.add_pid(pid);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2CWindowAssociateTitle> CreateS2CWindowAssociateTitleDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *pid = nullptr,
    const char *title = nullptr) {
  auto pid__ = pid ? _fbb.CreateString(pid) : 0;
  auto title__ = title ? _fbb.CreateString(title) : 0;
  return UProtoS2C::CreateS2CWindowAssociateTitle(
      _fbb,
      pid__,
      title__);
}

struct S2CWindowServerEvent FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2CWindowServerEventBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PID = 4,
    VT_TYPE = 6,
    VT_PROPS = 8
  };
  const ::flatbuffers::String *pid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PID);
  }
  UProtoS2C::S2CWindowEventType type() const {
    return static_cast<UProtoS2C::S2CWindowEventType>(GetField<int16_t>(VT_TYPE, 0));
  }
  const UProtoS2C::S2CWindowProps *props() const {
    return GetStruct<const UProtoS2C::S2CWindowProps *>(VT_PROPS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PID) &&
           verifier.VerifyString(pid()) &&
           VerifyField<int16_t>(verifier, VT_TYPE, 2) &&
           VerifyField<UProtoS2C::S2CWindowProps>(verifier, VT_PROPS, 4) &&
           verifier.EndTable();
  }
};

struct S2CWindowServerEventBuilder {
  typedef S2CWindowServerEvent Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pid(::flatbuffers::Offset<::flatbuffers::String> pid) {
    fbb_.AddOffset(S2CWindowServerEvent::VT_PID, pid);
  }
  void add_type(UProtoS2C::S2CWindowEventType type) {
    fbb_.AddElement<int16_t>(S2CWindowServerEvent::VT_TYPE, static_cast<int16_t>(type), 0);
  }
  void add_props(const UProtoS2C::S2CWindowProps *props) {
    fbb_.AddStruct(S2CWindowServerEvent::VT_PROPS, props);
  }
  explicit S2CWindowServerEventBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2CWindowServerEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2CWindowServerEvent>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2CWindowServerEvent> CreateS2CWindowServerEvent(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> pid = 0,
    UProtoS2C::S2CWindowEventType type = UProtoS2C::S2CWindowEventType_Create,
    const UProtoS2C::S2CWindowProps *props = nullptr) {
  S2CWindowServerEventBuilder builder_(_fbb);
  builder_.add_props(props);
  builder_.add_pid(pid);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2CWindowServerEvent> CreateS2CWindowServerEventDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *pid = nullptr,
    UProtoS2C::S2CWindowEventType type = UProtoS2C::S2CWindowEventType_Create,
    const UProtoS2C::S2CWindowProps *props = nullptr) {
  auto pid__ = pid ? _fbb.CreateString(pid) : 0;
  return UProtoS2C::CreateS2CWindowServerEvent(
      _fbb,
      pid__,
      type,
      props);
}

struct S2CWindowRequestedEvent FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2CWindowRequestedEventBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PID = 4,
    VT_TYPE = 6,
    VT_PROPS = 8
  };
  const ::flatbuffers::String *pid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PID);
  }
  UProtoS2C::S2CWindowRequestedEventType type() const {
    return static_cast<UProtoS2C::S2CWindowRequestedEventType>(GetField<int16_t>(VT_TYPE, 0));
  }
  const UProtoS2C::S2CWindowProps *props() const {
    return GetStruct<const UProtoS2C::S2CWindowProps *>(VT_PROPS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PID) &&
           verifier.VerifyString(pid()) &&
           VerifyField<int16_t>(verifier, VT_TYPE, 2) &&
           VerifyField<UProtoS2C::S2CWindowProps>(verifier, VT_PROPS, 4) &&
           verifier.EndTable();
  }
};

struct S2CWindowRequestedEventBuilder {
  typedef S2CWindowRequestedEvent Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pid(::flatbuffers::Offset<::flatbuffers::String> pid) {
    fbb_.AddOffset(S2CWindowRequestedEvent::VT_PID, pid);
  }
  void add_type(UProtoS2C::S2CWindowRequestedEventType type) {
    fbb_.AddElement<int16_t>(S2CWindowRequestedEvent::VT_TYPE, static_cast<int16_t>(type), 0);
  }
  void add_props(const UProtoS2C::S2CWindowProps *props) {
    fbb_.AddStruct(S2CWindowRequestedEvent::VT_PROPS, props);
  }
  explicit S2CWindowRequestedEventBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2CWindowRequestedEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2CWindowRequestedEvent>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2CWindowRequestedEvent> CreateS2CWindowRequestedEvent(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> pid = 0,
    UProtoS2C::S2CWindowRequestedEventType type = UProtoS2C::S2CWindowRequestedEventType_Minimize,
    const UProtoS2C::S2CWindowProps *props = nullptr) {
  S2CWindowRequestedEventBuilder builder_(_fbb);
  builder_.add_props(props);
  builder_.add_pid(pid);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2CWindowRequestedEvent> CreateS2CWindowRequestedEventDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *pid = nullptr,
    UProtoS2C::S2CWindowRequestedEventType type = UProtoS2C::S2CWindowRequestedEventType_Minimize,
    const UProtoS2C::S2CWindowProps *props = nullptr) {
  auto pid__ = pid ? _fbb.CreateString(pid) : 0;
  return UProtoS2C::CreateS2CWindowRequestedEvent(
      _fbb,
      pid__,
      type,
      props);
}

}  // namespace UProtoS2C

#endif  // FLATBUFFERS_GENERATED_SERVER_UPROTOS2C_H_
