// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENT_UPROTOC2S_H_
#define FLATBUFFERS_GENERATED_CLIENT_UPROTOC2S_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace UProtoC2S {

struct C2SMouseInput;
struct C2SMouseInputBuilder;

enum C2SMouseEventType : int16_t {
  C2SMouseEventType_Move = 0,
  C2SMouseEventType_Button = 1,
  C2SMouseEventType_Wheel = 2,
  C2SMouseEventType_MIN = C2SMouseEventType_Move,
  C2SMouseEventType_MAX = C2SMouseEventType_Wheel
};

inline const C2SMouseEventType (&EnumValuesC2SMouseEventType())[3] {
  static const C2SMouseEventType values[] = {
    C2SMouseEventType_Move,
    C2SMouseEventType_Button,
    C2SMouseEventType_Wheel
  };
  return values;
}

inline const char * const *EnumNamesC2SMouseEventType() {
  static const char * const names[4] = {
    "Move",
    "Button",
    "Wheel",
    nullptr
  };
  return names;
}

inline const char *EnumNameC2SMouseEventType(C2SMouseEventType e) {
  if (::flatbuffers::IsOutRange(e, C2SMouseEventType_Move, C2SMouseEventType_Wheel)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesC2SMouseEventType()[index];
}

enum C2SMouseEventButton : int16_t {
  C2SMouseEventButton_Left = 0,
  C2SMouseEventButton_Right = 1,
  C2SMouseEventButton_Middle = 2,
  C2SMouseEventButton_MIN = C2SMouseEventButton_Left,
  C2SMouseEventButton_MAX = C2SMouseEventButton_Middle
};

inline const C2SMouseEventButton (&EnumValuesC2SMouseEventButton())[3] {
  static const C2SMouseEventButton values[] = {
    C2SMouseEventButton_Left,
    C2SMouseEventButton_Right,
    C2SMouseEventButton_Middle
  };
  return values;
}

inline const char * const *EnumNamesC2SMouseEventButton() {
  static const char * const names[4] = {
    "Left",
    "Right",
    "Middle",
    nullptr
  };
  return names;
}

inline const char *EnumNameC2SMouseEventButton(C2SMouseEventButton e) {
  if (::flatbuffers::IsOutRange(e, C2SMouseEventButton_Left, C2SMouseEventButton_Middle)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesC2SMouseEventButton()[index];
}

struct C2SMouseInput FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2SMouseInputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PID = 4,
    VT_X = 6,
    VT_Y = 8,
    VT_BUTTON = 10,
    VT_ACTION = 12
  };
  const ::flatbuffers::String *pid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PID);
  }
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  UProtoC2S::C2SMouseEventButton button() const {
    return static_cast<UProtoC2S::C2SMouseEventButton>(GetField<int16_t>(VT_BUTTON, 0));
  }
  UProtoC2S::C2SMouseEventType action() const {
    return static_cast<UProtoC2S::C2SMouseEventType>(GetField<int16_t>(VT_ACTION, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PID) &&
           verifier.VerifyString(pid()) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<int16_t>(verifier, VT_BUTTON, 2) &&
           VerifyField<int16_t>(verifier, VT_ACTION, 2) &&
           verifier.EndTable();
  }
};

struct C2SMouseInputBuilder {
  typedef C2SMouseInput Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pid(::flatbuffers::Offset<::flatbuffers::String> pid) {
    fbb_.AddOffset(C2SMouseInput::VT_PID, pid);
  }
  void add_x(float x) {
    fbb_.AddElement<float>(C2SMouseInput::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(C2SMouseInput::VT_Y, y, 0.0f);
  }
  void add_button(UProtoC2S::C2SMouseEventButton button) {
    fbb_.AddElement<int16_t>(C2SMouseInput::VT_BUTTON, static_cast<int16_t>(button), 0);
  }
  void add_action(UProtoC2S::C2SMouseEventType action) {
    fbb_.AddElement<int16_t>(C2SMouseInput::VT_ACTION, static_cast<int16_t>(action), 0);
  }
  explicit C2SMouseInputBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2SMouseInput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2SMouseInput>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2SMouseInput> CreateC2SMouseInput(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> pid = 0,
    float x = 0.0f,
    float y = 0.0f,
    UProtoC2S::C2SMouseEventButton button = UProtoC2S::C2SMouseEventButton_Left,
    UProtoC2S::C2SMouseEventType action = UProtoC2S::C2SMouseEventType_Move) {
  C2SMouseInputBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_pid(pid);
  builder_.add_action(action);
  builder_.add_button(button);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C2SMouseInput> CreateC2SMouseInputDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *pid = nullptr,
    float x = 0.0f,
    float y = 0.0f,
    UProtoC2S::C2SMouseEventButton button = UProtoC2S::C2SMouseEventButton_Left,
    UProtoC2S::C2SMouseEventType action = UProtoC2S::C2SMouseEventType_Move) {
  auto pid__ = pid ? _fbb.CreateString(pid) : 0;
  return UProtoC2S::CreateC2SMouseInput(
      _fbb,
      pid__,
      x,
      y,
      button,
      action);
}

}  // namespace UProtoC2S

#endif  // FLATBUFFERS_GENERATED_CLIENT_UPROTOC2S_H_
